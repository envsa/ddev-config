#!/bin/bash
#ddev-generated

## Description: dump mysql database on remote system table by table into /mnt/ddev_config/db-cache/(target)/(records|struct)/ directories
## Usage: dump-db [options, call without params for help] ‹target/source›


# =============================================================================
# FUNCTIONS
# =============================================================================
function usage() {
  # Set colors for section titles and targets
  sectionColor="${CLR_GRN}"
  targetColor="${CLR_YEL}"

  # Files to ignore
  ignore_files=("README.txt" ".gitignore" "example")

  # Build the find command
  find_cmd="find \"${TARGET_DIR}\" -type f"

  # Add ignored files to find command
  for file in "${ignore_files[@]}"; do
    find_cmd+=" -not -name ${file}"
  done

  # Add -print0 to the find command
  find_cmd+=" -print0"

  # Usage section
  printf "${sectionColor}Usage:${CLR_END}\n"
  printf "\tddev dump-db [options] ‹target/source›\n"
  printf "\n" # Add a line between sections

  # Targets/Sources section
  printf "${sectionColor}Targets/Sources:${CLR_END}\n"
  printf "\t· ${targetColor}%s${CLR_END}\n" "ddev (the local ddev database)"

  if [ -n "${TARGET_DIR}" ]; then
    eval ${find_cmd} | while IFS= read -r -d '' _i; do
      printf "\t· ${targetColor}%s${CLR_END}\n" "$(basename "$_i")"
    done
  else
    printf "\t${targetColor}No target directory specified${CLR_END}\n"
  fi

  printf "\n" # Add a line between sections

  # Options section
  printf "${sectionColor}Options:${CLR_END}\n"
  printf "\t%-15s %s\n" "-v|--verbose" "Echo all executed commands"
  printf "\n" # Add a line at the end
}

function parseArgs() {
  # -allow a command to fail with !’s side effect on errexit
  # -use return value from ${PIPESTATUS[0]}, because ! hosed $?
  ! getopt --test > /dev/null
  if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    errorMessage "'getopt --test' failed in this environment."
    exit 1
  fi

  OPTIONS="nv"
  LONGOPTS="verbose"

  # -regarding ! and PIPESTATUS see above
  # -temporarily store output to be able to check for errors
  # -activate quoting/enhanced mode (e.g. by writing out “--options”)
  # -pass arguments only via   -- "$@"   to separate them correctly
  ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    usage
    exit 2
  fi

  # read getopt’s output this way to handle the quoting right:
  eval set -- "$PARSED"

  while true; do
    case "$1" in
      -v | --verbose)
        isVerbose=1
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        targetName="$1"
        usage
        exit 3
        ;;
    esac
  done

  # handle non-option arguments
  if [[ $# -ne 1 ]]; then
    usage
    exit 4
  fi
  targetName="$1"

  if [ "$targetName" == "ddev" ]; then
    isDumpDdev=1
  else
    # read target config
    if ! . "$TARGET_DIR$targetName" 2>/dev/null; then
      errorMessage "Target/source ‹$targetName› not found."
      usage
      exit 3
    fi
  fi
}

# =============================================================================
# INIT
# =============================================================================

# set colours and some high level paths etc
source "/mnt/ddev_config/commands/.common/init.sh"

# set default args
isVerbose=0
targetName=
typeset -A target

# parse args from command
parseArgs "$@"

# these files rely on the target being set so we delay them being included
source "${DDEV_CONFIG_DIR}commands/.common/settings.sh"
source "${DDEV_CONFIG_DIR}commands/.common/paths.sh"
source "${DDEV_CONFIG_DIR}commands/.common/commands.sh"
source "${DDEV_CONFIG_DIR}commands/.common/functions.sh"

# =============================================================================
# MAIN
# =============================================================================
dump_remote_db
copy_remote_db_files_to_local
