#ddev-generated
# Docs: https://ddev.readthedocs.io/en/latest/users/providers/
environment_variables:
  environmentName: production

auth_command:
  command: |
    set -eu -o pipefail
    ssh-add -l >/dev/null || ( echo "Please 'ddev auth ssh' before running this command." && exit 1 )

db_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail

    declare -A target

    if ! . "./.ddev/targets/${environmentName}" 2>/dev/null; then
      echo "ERROR: Target ‹$environmentName› not found."
      exit 1
    fi

    # create unique identifier to avoid issues for multiple pulls at same time
    backupid=$(cat /proc/sys/kernel/random/uuid)
    echo "Created unique identifier for backup: ${backupid} ..."

    # create backup on remote via craft cli, create backups folder if not existent
    ssh ${target[sshUser]}@${target[sshHost]} -q -p ${target[sshPort]} "cd ${target[sshPath]} && bash -s" <<ENDSSH
      #set -x # uncomment for debug
      mkdir -p ./storage/backups
      php craft db/backup "./storage/backups/db-backup-pull-${backupid}.sql"
    ENDSSH

    # rsync to local .ddev/.downloads/ folder
    echo "Rsyncing backup file to local .ddev/.downloads/ directory ..."
    rsync -avz --info=progress2 -e "ssh -q -p ${target[sshPort]}" "${target[sshUser]}@${target[sshHost]}:${target[sshPath]}/storage/backups/db-backup-pull-${backupid}.sql" /var/www/html/.ddev/.downloads/

    # remove the backup from remote host
    ssh ${target[sshUser]}@${target[sshHost]} -q -p ${target[sshPort]} "cd ${target[sshPath]} && bash -s" <<ENDSSH
      #set -x # uncomment for debug
      rm "./storage/backups/db-backup-pull-$backupid.sql"
    ENDSSH

    # DDEV will import a db.sql.gz file automatically, therefore we rename our backup file:
    echo "DDEV will import db.sql.gz files automatically in this step, renaming it ..."
    mv ".ddev/.downloads/db-backup-pull-${backupid}.sql" .ddev/.downloads/db.sql
    gzip -9 .ddev/.downloads/db.sql
  service: web
